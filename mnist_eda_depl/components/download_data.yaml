name: Download data
inputs:
- {name: bucket, type: String}
- {name: training_data_path, type: String}
outputs:
- {name: output_data, type: CSV}
implementation:
  container:
    image: python:3.7-slim
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'boto3' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'boto3' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def download_data(bucket, training_data_path, output_data_path):
          import boto3
          s3 = boto3.client("s3", region_name='ap-south-1')
          s3.download_file(bucket, training_data_path, output_data_path)

      import argparse
      _parser = argparse.ArgumentParser(prog='Download data', description='')
      _parser.add_argument("--bucket", dest="bucket", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--training-data-path", dest="training_data_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--output-data", dest="output_data_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = download_data(**_parsed_args)
    args:
    - --bucket
    - {inputValue: bucket}
    - --training-data-path
    - {inputValue: training_data_path}
    - --output-data
    - {outputPath: output_data}
